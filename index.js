require('dotenv').config()
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session, InputFile } = require('grammy')
const { Router } = require("@grammyjs/router");
const sharp = require('sharp');

// DaDate
const DaDate_url = "http://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party";

const { google } = require('googleapis');
const keys = require('./winter-jet-375911-dd7563b7f443.json');
// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const client = new google.auth.JWT(
    keys.client_email,
    null,
    keys.private_key,
    ['https://www.googleapis.com/auth/spreadsheets']
);

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets API
const sheets = google.sheets({ version: 'v4', auth: client });

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É
async function writeToGoogleSheet(data) {
    const spreadsheetId = '19HKhxN7iopzzBNBljroBBcLlX_yzw2DCeSZHgEokf24';
    const range = 'Sheet1!A1';

    const valueInputOption = 'RAW';
    const insertDataOption = 'INSERT_ROWS';

    const requestBody = {
        values: [Object.values(data)]
    };

    try {
        const response = await sheets.spreadsheets.values.append({
            spreadsheetId,
            range,
            valueInputOption,
            insertDataOption,
            requestBody
        });

        console.log('Data successfully written to Google Sheets:', response.data);
    } catch (err) {
        console.error('Error writing data to Google Sheets:', err);
    }
}


const bot = new Bot(process.env.BOT_API_KEY);

const router = new Router((ctx) => ctx.session.step);

// Use session.
bot.use(session({ initial: () => ({ step: 'default', data: {} }) }));


bot.api.setMyCommands([
    {
        command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
    },
    {
        command: 'generate', description: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω'
    }
])

bot.command('start', async (ctx) => {
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç!`)
})

bot.command('generate', async (ctx) => {
    ctx.session.step = 'ask_inn';
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù: üíº`);
});

const ask_inn = router.route("ask_inn");

ask_inn.on("message:text", async (ctx) => {
    const inn = ctx.message.text; // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ò–ù–ù

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ò–ù–ù —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if (/^\d+$/.test(inn)) {

        if (ctx.message.text.length === 10 || inn.length === 12) {

            const options = {
                method: "POST",
                mode: "cors",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "Authorization": "Token " + process.env.DADATE_API_KEY
                },
                body: JSON.stringify({ query: inn })
            }

            const innKeyboard = new InlineKeyboard()
                .text('–î–∞ ‚úÖ', `yes`)
                .text('–ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ', `no`);

            ctx.session.data = {
                inn: '',
                organization: '',
                fio: '',
                email: '',
                phone: '',
                coupon: '',
            };

            ctx.session.data.inn = inn;

            try {
                const response = await fetch(DaDate_url, options);
                const result = await response.json();
                const organization = result.suggestions[0].value;
                ctx.session.organization = organization;
                await ctx.reply(`–í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${organization} ?`, {
                    reply_markup: innKeyboard
                });

            } catch (error) {
                await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ò–ù–ù?`, {
                    reply_markup: innKeyboard
                });

            }
        } else {
            await ctx.reply(`–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. üö´`);
        }
    } else {
        await ctx.reply('–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. üö´');
    }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ "yes" –∏ "no"
bot.callbackQuery('yes', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply(`üéâ –ò–ù–ù —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω: ${ctx.session.data.inn}`);
    ctx.session.data.organization = ctx.session.organization;
    ctx.session.step = 'ask_email';
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ Email: üìù`);
});

bot.callbackQuery('no', async (ctx) => {
    await ctx.answerCallbackQuery();
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ò–ù–ù, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—á–∞–ª—É
    ctx.session.step = 'ask_inn';
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù: üíº`);
});


const ask_email = router.route("ask_email");

ask_email.on("message:text", async (ctx) => {
    const email = ctx.message.text; // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –§–ò–û
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û –≤ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
    ctx.session.data.email = email;
    await ctx.reply(`üåü Email —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω:  ${ctx.session.data.email}`);
    ctx.session.step = 'ask_phone';
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ—Ñ–æ–Ω: üìù`);
})


const ask_phone = router.route("ask_phone");

ask_phone.on("message:text", async (ctx) => {
    const phone = ctx.message.text; // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –§–ò–û

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û –≤ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
    ctx.session.data.phone = phone;
    await ctx.reply(`üåü –¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω:  ${ctx.session.data.phone}`);

    ctx.session.step = 'ask_fio';
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –§–ò–û: üìù`);
})


const ask_fio = router.route("ask_fio");

ask_fio.on("message:text", async (ctx) => {
    const fio = ctx.message.text; // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –§–ò–û

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û –≤ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
    ctx.session.data.fio = fio;
    await ctx.reply(`üåü –§–ò–û —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω:  ${ctx.session.data.fio}`);

    ctx.session.step = 'coupon';
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—É–ø–æ–Ω–∞
    const couponId = generateCouponId();

    const couponKeyboard = new InlineKeyboard()
        .text('5000 —Ä—É–±–ª–µ–π üí∏', `coupon-1`)
        .text('15000 —Ä—É–±–ª–µ–π üí∏', `coupon-2`).row()
        .text('–í—ã–±—Ä–∞—Ç—å –æ–±–∞ –∫—É–ø–æ–Ω–∞ üí∏', `coupon-3`);

    ctx.session.data.couponId = couponId;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É–ø–æ–Ω–∞
    await ctx.reply(`–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –∫—É–ø–æ–Ω üéüÔ∏è`, {
        reply_markup: couponKeyboard
    });
})

// –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫—É–ø–æ–Ω–∞
function generateCouponId() {
    return Math.random().toString(36).substring(7);
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ø–æ–Ω–∞
router.route("coupon", async (ctx) => {
    await ctx.answerCallbackQuery();
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É–ø–æ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const coupon = ctx.callbackQuery.data;

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É–ø–æ–Ω –≤ –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
    ctx.session.data.coupon = coupon;

    const roundedCorners = Buffer.from(
        `<svg width="575" height="302"><text x="50%" y="50%" font-size="40" text-anchot="middle">${ctx.session.data.couponId}</text></svg>`
    );

    if (coupon == 'coupon-1') {
        const sharpImg =
            sharp('./images/coupon5000.png')
                .composite([{
                    input: roundedCorners,
                }]);
        await ctx.replyWithPhoto(new InputFile(sharpImg));
    } else if (coupon == 'coupon-2') {
        const sharpImg2 =
            sharp('./images/coupon15000.png')
                .composite([{
                    input: roundedCorners,
                }]);
        await ctx.replyWithPhoto(new InputFile(sharpImg2));
    } else if (coupon == 'coupon-3') {

        const sharpImg =
            sharp('./images/coupon5000.png')
                .composite([{
                    input: roundedCorners,
                }]);
        const sharpImg2 =
            sharp('./images/coupon15000.png')
                .composite([{
                    input: roundedCorners,
                }]);
        await ctx.replyWithPhoto(new InputFile(sharpImg));
        await ctx.replyWithPhoto(new InputFile(sharpImg2));
    }

    ctx.session.step = 'final';

    const finalKeyboard = new InlineKeyboard()
        .text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É üìäüì•', `push`).row()
        .text('–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ üîÑüìù', `again`);


    await ctx.reply(`–î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚úÖ \n \n üíº –ò–ù–ù: ${ctx.session.data.inn} \n üìù –§–ò–û : ${ctx.session.data.fio} \n üéüÔ∏è –ö—É–ø–æ–Ω: ${ctx.session.data.coupon}`, {
        reply_markup: finalKeyboard
    });
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ "push" –∏ "again"
bot.callbackQuery('push', async (ctx) => {
    await ctx.answerCallbackQuery();
    await writeToGoogleSheet(ctx.session.data);
    await ctx.reply('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É! üöÄüìä');
    ctx.session.step = 'default';
});

bot.callbackQuery('again', async (ctx) => {
    await ctx.answerCallbackQuery();
    // –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
    ctx.session.data = {};
    ctx.session.step = 'ask_inn';
    await ctx.reply('–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∑–∞–Ω–æ–≤–æ. üîÑüî¢');
});


const defaultRoute = router.route("default");

defaultRoute.on("message:text", async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if (!ctx.message.isCommand && ctx.session.step !== 'ask_inn' && ctx.session.step !== 'ask_fio' && ctx.session.step !== 'coupon') {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é"
        await ctx.reply("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.");
    }
});


bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error("Could not contact Telegram:", e);
    } else {
        console.error("Unknown error:", e);
    }
});

bot.use(router);
bot.start();